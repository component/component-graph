#!/usr/bin/env node

/**
 * Module dependencies.
 */

var program = require('commander')
  , component = require('component')
  , spawn = require('child_process').spawn
  , path = require('path')
  , resolve = path.resolve
  , lookup = component.lookup

// parse argv

program
   .option('-d, --depth <depth>', 'lookup depth [1|2|3]')
   .option('-t, --type <name>', 'graph type [neato|twopi|fdp|sfdp|circo|dot]', 'dot')
   .option('-f, --format <name>', 'set output format [png]', 'png')
   .option('-o, --out <path>', 'output to the <path> [out.png]', 'out.png')
   .parse(process.argv);

/**
 * Return the dependency tree of the given config `file`.
 *
 * @param {String} file
 * @param {Array} paths
 * @return {Object}
 */

function tree(file, paths, depth){
  depth = depth || 0;
  var conf = require(resolve(file));
  var deps = Object.keys(conf.dependencies || {});
  var node = {};

  // local deps
  if (conf.local) deps = deps.concat(conf.local);

  // lookup paths
  paths = (paths || ['components']).concat(conf.paths);

  // label
  node.label = conf.name;

  // flag local
  node.local = !conf.repo;

  // --depth n
  if (++depth > program.depth) return node;

  // dependencies
  node.nodes = deps.map(function(dep){
    var dep = dep.replace('/', '-');
    var file = lookup(dep, paths);
    if (!file) throw new Error('failed to resolve location of "' + dep + '"');
    file = resolve(file, 'component.json');
    return tree(file, paths, depth);
  });

  return node;
}

/**
 * Output graph.
 *
 * @param {Object} node
 * @param {Object} stream
 */

function graph(node, stream) {
  if (node.local) stream.write('  "' + node.label + '" [color=blue]');
  if (node.nodes) {
    node.nodes.forEach(function(dep){
      stream.write('  "' + node.label + '"');
      stream.write(' -> "' + dep.label + '"');
      stream.write(' [style=dotted]');
      stream.write(';\n');
      graph(dep, stream);
    });
  }
}

/**
 * Indent `str`.
 */

function indent(str) {
  return str.replace(/^/gm, '  ');
}

// output tree

var tree = tree('component.json');
var proc = spawn(program.type, ['-T' + program.format, '-o', program.out]);
var stream = proc.stdin;

stream.write('digraph {\n');
stream.write('  node [style=filled, fillcolor=white, nodesep=2.0];\n');
stream.write('  graph [overlap=false];\n');
stream.write('\n');
graph(tree, stream);
stream.write('}\n');
stream.end();

proc.stderr.pipe(process.stderr);
